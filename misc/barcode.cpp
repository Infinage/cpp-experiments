/*
 * Code 128 Implementation in CPP
 */

#include <fstream>
#include <string>
#include <unordered_map>
#include <vector>

class Barcode {
    private:
        const std::vector<std::string> patterns {{
            "11011001100", "11001101100", "11001100110", "10010011000", "10010001100",
            "10001001100", "10011001000", "10011000100", "10001100100", "11001001000",
            "11001000100", "11000100100", "10110011100", "10011011100", "10011001110",
            "10111001100", "10011101100", "10011100110", "11001110010", "11001011100",
            "11001001110", "11011100100", "11001110100", "11101101110", "11101001100",
            "11100101100", "11100100110", "11101100100", "11100110100", "11100110010",
            "11011011000", "11011000110", "11000110110", "10100011000", "10001011000",
            "10001000110", "10110001000", "10001101000", "10001100010", "11010001000",
            "11000101000", "11000100010", "10110111000", "10110001110", "10001101110",
            "10111011000", "10111000110", "10001110110", "11101110110", "11010001110",
            "11000101110", "11011101000", "11011100010", "11011101110", "11101011000",
            "11101000110", "11100010110", "11101101000", "11101100010", "11100011010",
            "11101111010", "11001000010", "11110001010", "10100110000", "10100001100",
            "10010110000", "10010000110", "10000101100", "10000100110", "10110010000",
            "10110000100", "10011010000", "10011000010", "10000110100", "10000110010",
            "11000010010", "11001010000", "11110111010", "11000010100", "10001111010",
            "10100111100", "10010111100", "10010011110", "10111100100", "10011110100",
            "10011110010", "11110100100", "11110010100", "11110010010", "11011011110",
            "11011110110", "11110110110", "10101111000", "10100011110", "10001011110",
            "10111101000", "10111100010", "11110101000", "11110100010", "10111011110",
            "10111101110", "11101011110", "11110101110"
        }};

        const std::vector<std::string> Code128AChars {{
            "space", "!", "\"", "#", "$", "%", "&", "\'", "(", ")", "*", "+", ",", "-", ".", "/",
            "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@",
            "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q",
            "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "[", "\\", "]", "^", "_", "NUL", "SOH",
            "STX", "ETX", "EOT", "ENQ", "ACK", "BEL", "BS", "HT", "LF", "VT", "FF", "CR", "SO",
            "SI", "DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB", "CAN", "EM", "SUB",
            "ESC", "FS", "GS", "RS", "US", "FNC 3", "FNC 2", "Shift B", "Code C", "Code B",
            "FNC 4", "FNC 1"
        }};

        const std::vector<std::string> Code128BChars {{
            "space", "!", "\"", "#", "$", "%", "&", "\'", "(", ")", "*", "+", ",", "-", ".", "/",
            "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@",
            "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q",
            "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "[", "\\", "]", "^", "_", "`", "a", "b",
            "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s",
            "t", "u", "v", "w", "x", "y", "z", "{", "|", "}", "~", "DEL", "FNC 3", "FNC 2", "Shift A",
            "Code C", "FNC 4", "Code A", "FNC 1"
        }};

        const std::vector<std::string> Code128CChars {{
            "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12",
            "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23",
            "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34",
            "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45",
            "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56",
            "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67",
            "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78",
            "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89",
            "90", "91", "92", "93", "94", "95", "96", "97", "98", "99",
            "Code B", "Code A", "FNC 1"
        }};

        std::string START_A, START_B, START_C, STOP;
        std::unordered_map<std::string, std::string> CODE128A, CODE128B, CODE128C;

    public:

        Barcode() {
            START_A = "11010000100";
            START_B = "11010010000";
            START_C = "11010011100";
            STOP    = "1100011101011";
            for (std::size_t i{0}; i < Code128AChars.size(); i++) {
                CODE128A[Code128AChars[i]] = patterns[i];
                CODE128B[Code128BChars[i]] = patterns[i];
                CODE128C[Code128CChars[i]] = patterns[i];
            }
        }

        void print(std::vector<bool> &codes, std::string &fname, std::size_t width = 10, std::size_t height = 80) {
            // Write as binary
            std::ofstream ofs {fname, std::ios::binary};

            // Specify format and structure
            ofs << "P4\n" << (codes.size() * width) << " " << height << "\n";

            // Read the vector of bools and write to file
            for (std::size_t i {0}; i < height; i++) {
                // Repeat line 'height' no of times
                unsigned int byte {0};
                int bitCount {0};
                for (bool code: codes) {
                    for (std::size_t itr {0}; itr < width; itr++) {
                        byte = (byte << 1) | (code? 1: 0);
                        if (++bitCount == 8) {
                            ofs.put(static_cast<char>(byte));
                            bitCount = 0;
                            byte = 0;
                        }
                    }
                }

                // Any pending bits?
                if (bitCount > 0) {
                    byte <<= (8 - bitCount);
                    ofs.put(static_cast<char>(byte));
                }
            }
        }

        static void addQuietZone(std::vector<bool> &codes, std::size_t size = 10) {
            std::vector<bool> quiet(size, false);
            codes.insert(codes.begin(), quiet.begin(), quiet.end());
            codes.insert(codes.end(), quiet.begin(), quiet.end());
        }
};

int main() {
    std::vector<bool> codes {{1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,1,1,0,0,0,0,1,1,1,0}};
    std::string fname {"sample.pbm"};
    Barcode bg;
    bg.addQuietZone(codes);
    bg.print(codes, fname);
}
